Index: app/src/main/java/com/plcoding/spotifycloneyt/di/ServiceModule.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.plcoding.spotifycloneyt.di\r\n\r\nimport android.content.Context\r\nimport com.google.android.exoplayer2.C\r\nimport com.google.android.exoplayer2.SimpleExoPlayer\r\nimport com.google.android.exoplayer2.audio.AudioAttributes\r\nimport com.google.android.exoplayer2.upstream.DefaultDataSourceFactory\r\nimport com.google.android.exoplayer2.util.Util\r\nimport com.plcoding.spotifycloneyt.data.remote.MusicDatabase\r\nimport dagger.Module\r\nimport dagger.Provides\r\nimport dagger.hilt.InstallIn\r\nimport dagger.hilt.android.components.ServiceComponent\r\nimport dagger.hilt.android.qualifiers.ApplicationContext\r\nimport dagger.hilt.android.scopes.ServiceScoped\r\n\r\n@Module\r\n@InstallIn(ServiceComponent::class)\r\nobject ServiceModule {\r\n\r\n    @ServiceScoped\r\n    @Provides\r\n    fun provideMusicDatabase() = MusicDatabase()\r\n\r\n    @ServiceScoped\r\n    @Provides\r\n    fun provideAudioAttributes() = AudioAttributes.Builder()\r\n        .setContentType(C.CONTENT_TYPE_MUSIC)\r\n        .setUsage(C.USAGE_MEDIA)\r\n        .build()\r\n\r\n    @ServiceScoped\r\n    @Provides\r\n    fun provideExoPlayer(\r\n        @ApplicationContext context: Context,\r\n        audioAttributes: AudioAttributes\r\n    ) = SimpleExoPlayer.Builder(context).build().apply {\r\n        setAudioAttributes(audioAttributes, true)\r\n        setHandleAudioBecomingNoisy(true)\r\n    }\r\n\r\n    @ServiceScoped\r\n    @Provides\r\n    fun provideDataSourceFactory(\r\n        @ApplicationContext context: Context\r\n    ) = DefaultDataSourceFactory(context, Util.getUserAgent(context, \"Spotify App\"))\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/plcoding/spotifycloneyt/di/ServiceModule.kt b/app/src/main/java/com/plcoding/spotifycloneyt/di/ServiceModule.kt
--- a/app/src/main/java/com/plcoding/spotifycloneyt/di/ServiceModule.kt	(revision 5dc5900fd470722b3fa44bdcb4c3a0e32fb252bf)
+++ b/app/src/main/java/com/plcoding/spotifycloneyt/di/ServiceModule.kt	(date 1662387271852)
@@ -2,8 +2,10 @@
 
 import android.content.Context
 import com.google.android.exoplayer2.C
+import com.google.android.exoplayer2.ExoPlayer
 import com.google.android.exoplayer2.SimpleExoPlayer
 import com.google.android.exoplayer2.audio.AudioAttributes
+import com.google.android.exoplayer2.upstream.DefaultDataSource
 import com.google.android.exoplayer2.upstream.DefaultDataSourceFactory
 import com.google.android.exoplayer2.util.Util
 import com.plcoding.spotifycloneyt.data.remote.MusicDatabase
@@ -25,7 +27,7 @@
     @ServiceScoped
     @Provides
     fun provideAudioAttributes() = AudioAttributes.Builder()
-        .setContentType(C.CONTENT_TYPE_MUSIC)
+        .setContentType(C.AUDIO_CONTENT_TYPE_MUSIC)
         .setUsage(C.USAGE_MEDIA)
         .build()
 
@@ -34,7 +36,7 @@
     fun provideExoPlayer(
         @ApplicationContext context: Context,
         audioAttributes: AudioAttributes
-    ) = SimpleExoPlayer.Builder(context).build().apply {
+    ) = ExoPlayer.Builder(context).build().apply {
         setAudioAttributes(audioAttributes, true)
         setHandleAudioBecomingNoisy(true)
     }
@@ -43,7 +45,7 @@
     @Provides
     fun provideDataSourceFactory(
         @ApplicationContext context: Context
-    ) = DefaultDataSourceFactory(context, Util.getUserAgent(context, "Spotify App"))
+    ) = DefaultDataSource.Factory(context)
 }
 
 
Index: app/src/main/java/com/plcoding/spotifycloneyt/di/AppModule.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.plcoding.spotifycloneyt.di\r\n\r\nimport android.content.Context\r\nimport com.bumptech.glide.Glide\r\nimport com.bumptech.glide.load.engine.DiskCacheStrategy\r\nimport com.bumptech.glide.request.RequestOptions\r\nimport com.plcoding.spotifycloneyt.R\r\nimport dagger.Module\r\nimport dagger.Provides\r\nimport dagger.hilt.InstallIn\r\nimport dagger.hilt.android.components.ApplicationComponent\r\nimport dagger.hilt.android.qualifiers.ApplicationContext\r\nimport javax.inject.Singleton\r\n\r\n@Module\r\n@InstallIn(ApplicationComponent::class)\r\nobject AppModule {\r\n\r\n    @Singleton\r\n    @Provides\r\n    fun provideGlideInstance(\r\n        @ApplicationContext context: Context\r\n    ) = Glide.with(context).setDefaultRequestOptions(\r\n        RequestOptions()\r\n            .placeholder(R.drawable.ic_image)\r\n            .error(R.drawable.ic_image)\r\n            .diskCacheStrategy(DiskCacheStrategy.DATA)\r\n    )\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/plcoding/spotifycloneyt/di/AppModule.kt b/app/src/main/java/com/plcoding/spotifycloneyt/di/AppModule.kt
--- a/app/src/main/java/com/plcoding/spotifycloneyt/di/AppModule.kt	(revision 5dc5900fd470722b3fa44bdcb4c3a0e32fb252bf)
+++ b/app/src/main/java/com/plcoding/spotifycloneyt/di/AppModule.kt	(date 1662387271859)
@@ -8,12 +8,12 @@
 import dagger.Module
 import dagger.Provides
 import dagger.hilt.InstallIn
-import dagger.hilt.android.components.ApplicationComponent
 import dagger.hilt.android.qualifiers.ApplicationContext
+import dagger.hilt.components.SingletonComponent
 import javax.inject.Singleton
 
 @Module
-@InstallIn(ApplicationComponent::class)
+@InstallIn(SingletonComponent::class)
 object AppModule {
 
     @Singleton
Index: app/src/main/java/com/plcoding/spotifycloneyt/exoplayer/FirebaseMusicSource.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.plcoding.spotifycloneyt.exoplayer\r\n\r\nimport android.net.Uri\r\nimport android.support.v4.media.MediaBrowserCompat\r\nimport android.support.v4.media.MediaBrowserCompat.MediaItem.FLAG_PLAYABLE\r\nimport android.support.v4.media.MediaDescriptionCompat\r\nimport android.support.v4.media.MediaMetadataCompat\r\nimport android.support.v4.media.MediaMetadataCompat.*\r\nimport androidx.core.net.toUri\r\nimport com.google.android.exoplayer2.source.ConcatenatingMediaSource\r\nimport com.google.android.exoplayer2.source.ProgressiveMediaSource\r\nimport com.google.android.exoplayer2.upstream.DefaultDataSourceFactory\r\nimport com.plcoding.spotifycloneyt.data.remote.MusicDatabase\r\nimport com.plcoding.spotifycloneyt.exoplayer.State.*\r\nimport kotlinx.coroutines.Dispatchers\r\nimport kotlinx.coroutines.withContext\r\nimport javax.inject.Inject\r\n\r\nclass FirebaseMusicSource @Inject constructor(\r\n    private val musicDatabase: MusicDatabase\r\n){\r\n\r\n    var songs = emptyList<MediaMetadataCompat>()\r\n\r\n    suspend fun fetchMediaData() = withContext(Dispatchers.IO) {\r\n        state = STATE_INITIALIZING\r\n        val allSongs = musicDatabase.getAllSongs()\r\n        songs = allSongs.map { song ->\r\n            MediaMetadataCompat.Builder()\r\n                .putString(METADATA_KEY_ARTIST, song.subtitle)\r\n                .putString(METADATA_KEY_MEDIA_ID, song.mediaId)\r\n                .putString(METADATA_KEY_TITLE, song.title)\r\n                .putString(METADATA_KEY_DISPLAY_TITLE, song.title)\r\n                .putString(METADATA_KEY_DISPLAY_ICON_URI, song.imageUrl)\r\n                .putString(METADATA_KEY_MEDIA_URI, song.songUrl)\r\n                .putString(METADATA_KEY_ALBUM_ART_URI, song.imageUrl)\r\n                .putString(METADATA_KEY_DISPLAY_SUBTITLE, song.subtitle)\r\n                .putString(METADATA_KEY_DISPLAY_DESCRIPTION, song.subtitle)\r\n                .build()\r\n        }\r\n        state = STATE_INITIALIZED\r\n    }\r\n\r\n    fun asMediaSource(dataSourceFactory: DefaultDataSourceFactory): ConcatenatingMediaSource {\r\n        val concatenatingMediaSource = ConcatenatingMediaSource()\r\n        songs.forEach { song ->\r\n            val mediaSource = ProgressiveMediaSource.Factory(dataSourceFactory)\r\n                .createMediaSource(song.getString(METADATA_KEY_MEDIA_URI).toUri())\r\n            concatenatingMediaSource.addMediaSource(mediaSource)\r\n        }\r\n        return concatenatingMediaSource\r\n    }\r\n\r\n    fun asMediaItems() = songs.map { song ->\r\n        val desc = MediaDescriptionCompat.Builder()\r\n            .setMediaUri(song.getString(METADATA_KEY_MEDIA_URI).toUri())\r\n            .setTitle(song.description.title)\r\n            .setSubtitle(song.description.subtitle)\r\n            .setMediaId(song.description.mediaId)\r\n            .setIconUri(song.description.iconUri)\r\n            .build()\r\n        MediaBrowserCompat.MediaItem(desc, FLAG_PLAYABLE)\r\n    }\r\n\r\n    private val onReadyListeners = mutableListOf<(Boolean) -> Unit>()\r\n\r\n    private var state: State = STATE_CREATED\r\n        set(value) {\r\n            if(value == STATE_INITIALIZED || value == STATE_ERROR) {\r\n                synchronized(onReadyListeners) {\r\n                    field = value\r\n                    onReadyListeners.forEach { listener ->\r\n                        listener(state == STATE_INITIALIZED)\r\n                    }\r\n                }\r\n            } else {\r\n                field = value\r\n            }\r\n        }\r\n\r\n    fun whenReady(action: (Boolean) -> Unit): Boolean {\r\n        if(state == STATE_CREATED || state == STATE_INITIALIZING) {\r\n            onReadyListeners += action\r\n            return false\r\n        } else {\r\n            action(state == STATE_INITIALIZED)\r\n            return true\r\n        }\r\n    }\r\n}\r\n\r\nenum class State {\r\n    STATE_CREATED,\r\n    STATE_INITIALIZING,\r\n    STATE_INITIALIZED,\r\n    STATE_ERROR\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/plcoding/spotifycloneyt/exoplayer/FirebaseMusicSource.kt b/app/src/main/java/com/plcoding/spotifycloneyt/exoplayer/FirebaseMusicSource.kt
--- a/app/src/main/java/com/plcoding/spotifycloneyt/exoplayer/FirebaseMusicSource.kt	(revision 5dc5900fd470722b3fa44bdcb4c3a0e32fb252bf)
+++ b/app/src/main/java/com/plcoding/spotifycloneyt/exoplayer/FirebaseMusicSource.kt	(date 1662427960282)
@@ -7,8 +7,10 @@
 import android.support.v4.media.MediaMetadataCompat
 import android.support.v4.media.MediaMetadataCompat.*
 import androidx.core.net.toUri
+import com.google.android.exoplayer2.MediaItem
 import com.google.android.exoplayer2.source.ConcatenatingMediaSource
 import com.google.android.exoplayer2.source.ProgressiveMediaSource
+import com.google.android.exoplayer2.upstream.DefaultDataSource
 import com.google.android.exoplayer2.upstream.DefaultDataSourceFactory
 import com.plcoding.spotifycloneyt.data.remote.MusicDatabase
 import com.plcoding.spotifycloneyt.exoplayer.State.*
@@ -41,11 +43,11 @@
         state = STATE_INITIALIZED
     }
 
-    fun asMediaSource(dataSourceFactory: DefaultDataSourceFactory): ConcatenatingMediaSource {
+    fun asMediaSource(dataSourceFactory: DefaultDataSource.Factory): ConcatenatingMediaSource {
         val concatenatingMediaSource = ConcatenatingMediaSource()
         songs.forEach { song ->
             val mediaSource = ProgressiveMediaSource.Factory(dataSourceFactory)
-                .createMediaSource(song.getString(METADATA_KEY_MEDIA_URI).toUri())
+                .createMediaSource(MediaItem.fromUri(song.getString(METADATA_KEY_MEDIA_URI).toUri()))
             concatenatingMediaSource.addMediaSource(mediaSource)
         }
         return concatenatingMediaSource
@@ -79,12 +81,12 @@
         }
 
     fun whenReady(action: (Boolean) -> Unit): Boolean {
-        if(state == STATE_CREATED || state == STATE_INITIALIZING) {
+        return if(state == STATE_CREATED || state == STATE_INITIALIZING) {
             onReadyListeners += action
-            return false
+            false
         } else {
             action(state == STATE_INITIALIZED)
-            return true
+            true
         }
     }
 }
Index: app/src/main/java/com/plcoding/spotifycloneyt/exoplayer/callbacks/MusicPlaybackPreparer.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.plcoding.spotifycloneyt.exoplayer.callbacks\r\n\r\nimport android.net.Uri\r\nimport android.os.Bundle\r\nimport android.os.ResultReceiver\r\nimport android.support.v4.media.MediaMetadataCompat\r\nimport android.support.v4.media.session.PlaybackStateCompat\r\nimport com.google.android.exoplayer2.ControlDispatcher\r\nimport com.google.android.exoplayer2.Player\r\nimport com.google.android.exoplayer2.ext.mediasession.MediaSessionConnector\r\nimport com.plcoding.spotifycloneyt.exoplayer.FirebaseMusicSource\r\n\r\nclass MusicPlaybackPreparer(\r\n    private val firebaseMusicSource: FirebaseMusicSource,\r\n    private val playerPrepared: (MediaMetadataCompat?) -> Unit\r\n) : MediaSessionConnector.PlaybackPreparer {\r\n\r\n    override fun onCommand(\r\n        player: Player,\r\n        controlDispatcher: ControlDispatcher,\r\n        command: String,\r\n        extras: Bundle?,\r\n        cb: ResultReceiver?\r\n    ) = false\r\n\r\n    override fun getSupportedPrepareActions(): Long {\r\n        return PlaybackStateCompat.ACTION_PREPARE_FROM_MEDIA_ID or\r\n                PlaybackStateCompat.ACTION_PLAY_FROM_MEDIA_ID\r\n    }\r\n\r\n    override fun onPrepare(playWhenReady: Boolean) = Unit\r\n\r\n    override fun onPrepareFromMediaId(mediaId: String, playWhenReady: Boolean, extras: Bundle?) {\r\n        firebaseMusicSource.whenReady {\r\n            val itemToPlay = firebaseMusicSource.songs.find { mediaId == it.description.mediaId }\r\n            playerPrepared(itemToPlay)\r\n        }\r\n    }\r\n\r\n    override fun onPrepareFromSearch(query: String, playWhenReady: Boolean, extras: Bundle?) = Unit\r\n\r\n    override fun onPrepareFromUri(uri: Uri, playWhenReady: Boolean, extras: Bundle?) = Unit\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/plcoding/spotifycloneyt/exoplayer/callbacks/MusicPlaybackPreparer.kt b/app/src/main/java/com/plcoding/spotifycloneyt/exoplayer/callbacks/MusicPlaybackPreparer.kt
--- a/app/src/main/java/com/plcoding/spotifycloneyt/exoplayer/callbacks/MusicPlaybackPreparer.kt	(revision 5dc5900fd470722b3fa44bdcb4c3a0e32fb252bf)
+++ b/app/src/main/java/com/plcoding/spotifycloneyt/exoplayer/callbacks/MusicPlaybackPreparer.kt	(date 1662428428477)
@@ -5,7 +5,6 @@
 import android.os.ResultReceiver
 import android.support.v4.media.MediaMetadataCompat
 import android.support.v4.media.session.PlaybackStateCompat
-import com.google.android.exoplayer2.ControlDispatcher
 import com.google.android.exoplayer2.Player
 import com.google.android.exoplayer2.ext.mediasession.MediaSessionConnector
 import com.plcoding.spotifycloneyt.exoplayer.FirebaseMusicSource
@@ -17,11 +16,10 @@
 
     override fun onCommand(
         player: Player,
-        controlDispatcher: ControlDispatcher,
         command: String,
         extras: Bundle?,
         cb: ResultReceiver?
-    ) = false
+    ): Boolean = false
 
     override fun getSupportedPrepareActions(): Long {
         return PlaybackStateCompat.ACTION_PREPARE_FROM_MEDIA_ID or
Index: app/src/main/java/com/plcoding/spotifycloneyt/exoplayer/MusicService.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.plcoding.spotifycloneyt.exoplayer\r\n\r\nimport android.app.PendingIntent\r\nimport android.os.Bundle\r\nimport android.support.v4.media.MediaBrowserCompat\r\nimport android.support.v4.media.MediaMetadataCompat\r\nimport android.support.v4.media.session.MediaSessionCompat\r\nimport androidx.media.MediaBrowserServiceCompat\r\nimport com.google.android.exoplayer2.SimpleExoPlayer\r\nimport com.google.android.exoplayer2.ext.mediasession.MediaSessionConnector\r\nimport com.google.android.exoplayer2.upstream.DefaultDataSourceFactory\r\nimport com.plcoding.spotifycloneyt.exoplayer.callbacks.MusicPlaybackPreparer\r\nimport com.plcoding.spotifycloneyt.exoplayer.callbacks.MusicPlayerEventListener\r\nimport com.plcoding.spotifycloneyt.exoplayer.callbacks.MusicPlayerNotificationListener\r\nimport dagger.hilt.android.AndroidEntryPoint\r\nimport kotlinx.coroutines.CoroutineScope\r\nimport kotlinx.coroutines.Dispatchers\r\nimport kotlinx.coroutines.Job\r\nimport kotlinx.coroutines.cancel\r\nimport javax.inject.Inject\r\n\r\nprivate const val SERVICE_TAG = \"MusicService\"\r\n\r\n@AndroidEntryPoint\r\nclass MusicService : MediaBrowserServiceCompat() {\r\n\r\n    @Inject\r\n    lateinit var dataSourceFactory: DefaultDataSourceFactory\r\n\r\n    @Inject\r\n    lateinit var exoPlayer: SimpleExoPlayer\r\n\r\n    @Inject\r\n    lateinit var firebaseMusicSource: FirebaseMusicSource\r\n\r\n    private lateinit var musicNotificationManager: MusicNotificationManager\r\n\r\n    private val serviceJob = Job()\r\n    private val serviceScope = CoroutineScope(Dispatchers.Main + serviceJob)\r\n\r\n    private lateinit var mediaSession: MediaSessionCompat\r\n    private lateinit var mediaSessionConnector: MediaSessionConnector\r\n\r\n    var isForegroundService = false\r\n\r\n    private var curPlayingSong: MediaMetadataCompat? = null\r\n\r\n    override fun onCreate() {\r\n        super.onCreate()\r\n        val activityIntent = packageManager?.getLaunchIntentForPackage(packageName)?.let {\r\n            PendingIntent.getActivity(this, 0, it, 0)\r\n        }\r\n\r\n        mediaSession = MediaSessionCompat(this, SERVICE_TAG).apply {\r\n            setSessionActivity(activityIntent)\r\n            isActive = true\r\n        }\r\n\r\n        sessionToken = mediaSession.sessionToken\r\n\r\n        musicNotificationManager = MusicNotificationManager(\r\n            this,\r\n            mediaSession.sessionToken,\r\n            MusicPlayerNotificationListener(this)\r\n        ) {\r\n\r\n        }\r\n\r\n        val musicPlaybackPreparer = MusicPlaybackPreparer(firebaseMusicSource) {\r\n            curPlayingSong = it\r\n            preparePlayer(\r\n                firebaseMusicSource.songs,\r\n                it,\r\n                true\r\n            )\r\n        }\r\n\r\n        mediaSessionConnector = MediaSessionConnector(mediaSession)\r\n        mediaSessionConnector.setPlaybackPreparer(musicPlaybackPreparer)\r\n        mediaSessionConnector.setPlayer(exoPlayer)\r\n\r\n        exoPlayer.addListener(MusicPlayerEventListener(this))\r\n        musicNotificationManager.showNotification(exoPlayer)\r\n    }\r\n\r\n    private fun preparePlayer(\r\n        songs: List<MediaMetadataCompat>,\r\n        itemToPlay: MediaMetadataCompat?,\r\n        playNow: Boolean\r\n    ) {\r\n        val curSongIndex = if(curPlayingSong == null) 0 else songs.indexOf(itemToPlay)\r\n        exoPlayer.prepare(firebaseMusicSource.asMediaSource(dataSourceFactory))\r\n        exoPlayer.seekTo(curSongIndex, 0L)\r\n        exoPlayer.playWhenReady = playNow\r\n    }\r\n\r\n    override fun onDestroy() {\r\n        super.onDestroy()\r\n        serviceScope.cancel()\r\n    }\r\n\r\n    override fun onGetRoot(\r\n        clientPackageName: String,\r\n        clientUid: Int,\r\n        rootHints: Bundle?\r\n    ): BrowserRoot? {\r\n\r\n    }\r\n\r\n    override fun onLoadChildren(\r\n        parentId: String,\r\n        result: Result<MutableList<MediaBrowserCompat.MediaItem>>\r\n    ) {\r\n\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/plcoding/spotifycloneyt/exoplayer/MusicService.kt b/app/src/main/java/com/plcoding/spotifycloneyt/exoplayer/MusicService.kt
--- a/app/src/main/java/com/plcoding/spotifycloneyt/exoplayer/MusicService.kt	(revision 5dc5900fd470722b3fa44bdcb4c3a0e32fb252bf)
+++ b/app/src/main/java/com/plcoding/spotifycloneyt/exoplayer/MusicService.kt	(date 1662428724181)
@@ -3,20 +3,20 @@
 import android.app.PendingIntent
 import android.os.Bundle
 import android.support.v4.media.MediaBrowserCompat
+import android.support.v4.media.MediaDescriptionCompat
 import android.support.v4.media.MediaMetadataCompat
 import android.support.v4.media.session.MediaSessionCompat
 import androidx.media.MediaBrowserServiceCompat
-import com.google.android.exoplayer2.SimpleExoPlayer
+import com.google.android.exoplayer2.ExoPlayer
+import com.google.android.exoplayer2.Player
 import com.google.android.exoplayer2.ext.mediasession.MediaSessionConnector
-import com.google.android.exoplayer2.upstream.DefaultDataSourceFactory
+import com.google.android.exoplayer2.ext.mediasession.TimelineQueueNavigator
+import com.google.android.exoplayer2.upstream.DefaultDataSource
 import com.plcoding.spotifycloneyt.exoplayer.callbacks.MusicPlaybackPreparer
 import com.plcoding.spotifycloneyt.exoplayer.callbacks.MusicPlayerEventListener
 import com.plcoding.spotifycloneyt.exoplayer.callbacks.MusicPlayerNotificationListener
 import dagger.hilt.android.AndroidEntryPoint
-import kotlinx.coroutines.CoroutineScope
-import kotlinx.coroutines.Dispatchers
-import kotlinx.coroutines.Job
-import kotlinx.coroutines.cancel
+import kotlinx.coroutines.*
 import javax.inject.Inject
 
 private const val SERVICE_TAG = "MusicService"
@@ -25,10 +25,10 @@
 class MusicService : MediaBrowserServiceCompat() {
 
     @Inject
-    lateinit var dataSourceFactory: DefaultDataSourceFactory
+    lateinit var dataSourceFactory: DefaultDataSource.Factory
 
     @Inject
-    lateinit var exoPlayer: SimpleExoPlayer
+    lateinit var exoPlayer: ExoPlayer
 
     @Inject
     lateinit var firebaseMusicSource: FirebaseMusicSource
@@ -47,6 +47,9 @@
 
     override fun onCreate() {
         super.onCreate()
+        serviceScope.launch {
+            firebaseMusicSource.fetchMediaData()
+        }
         val activityIntent = packageManager?.getLaunchIntentForPackage(packageName)?.let {
             PendingIntent.getActivity(this, 0, it, 0)
         }
@@ -76,20 +79,26 @@
         }
 
         mediaSessionConnector = MediaSessionConnector(mediaSession)
+        mediaSessionConnector.setQueueNavigator(MusicQueueNavigator())
         mediaSessionConnector.setPlaybackPreparer(musicPlaybackPreparer)
         mediaSessionConnector.setPlayer(exoPlayer)
 
         exoPlayer.addListener(MusicPlayerEventListener(this))
         musicNotificationManager.showNotification(exoPlayer)
     }
+    private inner class MusicQueueNavigator:TimelineQueueNavigator(mediaSession){
+        override fun getMediaDescription(player: Player, windowIndex: Int): MediaDescriptionCompat {
+            return firebaseMusicSource.songs[windowIndex].description
+        }
 
+    }
     private fun preparePlayer(
         songs: List<MediaMetadataCompat>,
         itemToPlay: MediaMetadataCompat?,
         playNow: Boolean
     ) {
         val curSongIndex = if(curPlayingSong == null) 0 else songs.indexOf(itemToPlay)
-        exoPlayer.prepare(firebaseMusicSource.asMediaSource(dataSourceFactory))
+        exoPlayer.setMediaSource(firebaseMusicSource.asMediaSource(dataSourceFactory))
         exoPlayer.seekTo(curSongIndex, 0L)
         exoPlayer.playWhenReady = playNow
     }
Index: .idea/runConfigurations.xml
===================================================================
diff --git a/.idea/runConfigurations.xml b/.idea/runConfigurations.xml
deleted file mode 100644
--- a/.idea/runConfigurations.xml	(revision 5dc5900fd470722b3fa44bdcb4c3a0e32fb252bf)
+++ /dev/null	(revision 5dc5900fd470722b3fa44bdcb4c3a0e32fb252bf)
@@ -1,12 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project version="4">
-  <component name="RunConfigurationProducerService">
-    <option name="ignoredProducers">
-      <set>
-        <option value="org.jetbrains.plugins.gradle.execution.test.runner.AllInPackageGradleConfigurationProducer" />
-        <option value="org.jetbrains.plugins.gradle.execution.test.runner.TestClassGradleConfigurationProducer" />
-        <option value="org.jetbrains.plugins.gradle.execution.test.runner.TestMethodGradleConfigurationProducer" />
-      </set>
-    </option>
-  </component>
-</project>
\ No newline at end of file
Index: app/build.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>apply plugin: 'com.android.application'\r\napply plugin: 'kotlin-android'\r\napply plugin: 'kotlin-android-extensions'\r\napply plugin: 'kotlin-kapt'\r\napply plugin: 'dagger.hilt.android.plugin'\r\napply plugin: 'com.google.gms.google-services'\r\n\r\nandroid {\r\n    compileSdkVersion 30\r\n    buildToolsVersion \"29.0.3\"\r\n\r\n    defaultConfig {\r\n        applicationId \"com.plcoding.spotifycloneyt\"\r\n        minSdkVersion 21\r\n        targetSdkVersion 30\r\n        versionCode 1\r\n        versionName \"1.0\"\r\n\r\n        testInstrumentationRunner \"androidx.test.runner.AndroidJUnitRunner\"\r\n    }\r\n\r\n    buildTypes {\r\n        release {\r\n            minifyEnabled false\r\n            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'\r\n        }\r\n    }\r\n\r\n    compileOptions {\r\n        sourceCompatibility JavaVersion.VERSION_1_8\r\n        targetCompatibility JavaVersion.VERSION_1_8\r\n    }\r\n    kotlinOptions {\r\n        jvmTarget = JavaVersion.VERSION_1_8.toString()\r\n    }\r\n}\r\n\r\ndependencies {\r\n    implementation fileTree(dir: \"libs\", include: [\"*.jar\"])\r\n    implementation \"org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version\"\r\n    implementation 'androidx.core:core-ktx:1.3.1'\r\n    implementation 'androidx.appcompat:appcompat:1.2.0'\r\n    implementation 'androidx.constraintlayout:constraintlayout:2.0.1'\r\n    testImplementation 'junit:junit:4.12'\r\n    androidTestImplementation 'androidx.test.ext:junit:1.1.2'\r\n    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'\r\n\r\n    // Material Design\r\n    implementation 'com.google.android.material:material:1.3.0-alpha02'\r\n\r\n    // Architectural Components\r\n    implementation \"androidx.lifecycle:lifecycle-viewmodel-ktx:2.2.0\"\r\n\r\n    // Lifecycle\r\n    implementation \"androidx.lifecycle:lifecycle-extensions:2.2.0\"\r\n    implementation \"androidx.lifecycle:lifecycle-livedata-ktx:2.2.0\"\r\n    implementation \"androidx.lifecycle:lifecycle-runtime:2.2.0\"\r\n    implementation \"androidx.lifecycle:lifecycle-runtime-ktx:2.2.0\"\r\n\r\n    // Coroutines\r\n    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.3.9'\r\n    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.3.9'\r\n\r\n    // Coroutine Lifecycle Scopes\r\n    implementation \"androidx.lifecycle:lifecycle-viewmodel-ktx:2.2.0\"\r\n    implementation \"androidx.lifecycle:lifecycle-runtime-ktx:2.2.0\"\r\n\r\n    // Navigation Component\r\n    implementation \"androidx.navigation:navigation-fragment-ktx:2.3.0\"\r\n    implementation \"androidx.navigation:navigation-ui-ktx:2.3.0\"\r\n\r\n    // Glide\r\n    implementation 'com.github.bumptech.glide:glide:4.11.0'\r\n    kapt 'com.github.bumptech.glide:compiler:4.11.0'\r\n\r\n    // Activity KTX for viewModels()\r\n    implementation \"androidx.activity:activity-ktx:1.1.0\"\r\n\r\n    //Dagger - Hilt\r\n    implementation \"com.google.dagger:hilt-android:2.28-alpha\"\r\n    kapt \"com.google.dagger:hilt-android-compiler:2.28-alpha\"\r\n    implementation \"androidx.hilt:hilt-lifecycle-viewmodel:1.0.0-alpha02\"\r\n    kapt \"androidx.hilt:hilt-compiler:1.0.0-alpha02\"\r\n\r\n    // Timber\r\n    implementation 'com.jakewharton.timber:timber:4.7.1'\r\n\r\n    // Firebase Firestore\r\n    implementation 'com.google.firebase:firebase-firestore:21.6.0'\r\n\r\n    // Firebase Storage KTX\r\n    implementation 'com.google.firebase:firebase-storage-ktx:19.2.0'\r\n\r\n    // Firebase Coroutines\r\n    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-play-services:1.1.1'\r\n\r\n    // ExoPlayer\r\n    api \"com.google.android.exoplayer:exoplayer-core:2.11.8\"\r\n    api \"com.google.android.exoplayer:exoplayer-ui:2.11.8\"\r\n    api \"com.google.android.exoplayer:extension-mediasession:2.11.8\"\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/build.gradle b/app/build.gradle
--- a/app/build.gradle	(revision 5dc5900fd470722b3fa44bdcb4c3a0e32fb252bf)
+++ b/app/build.gradle	(date 1662387271842)
@@ -6,13 +6,13 @@
 apply plugin: 'com.google.gms.google-services'
 
 android {
-    compileSdkVersion 30
+    compileSdkVersion 32
     buildToolsVersion "29.0.3"
 
     defaultConfig {
         applicationId "com.plcoding.spotifycloneyt"
         minSdkVersion 21
-        targetSdkVersion 30
+        targetSdkVersion 32
         versionCode 1
         versionName "1.0"
 
@@ -38,64 +38,63 @@
 dependencies {
     implementation fileTree(dir: "libs", include: ["*.jar"])
     implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
-    implementation 'androidx.core:core-ktx:1.3.1'
-    implementation 'androidx.appcompat:appcompat:1.2.0'
-    implementation 'androidx.constraintlayout:constraintlayout:2.0.1'
-    testImplementation 'junit:junit:4.12'
-    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
-    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
+    implementation 'androidx.core:core-ktx:1.8.0'
+    implementation 'androidx.appcompat:appcompat:1.5.0'
+    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
+    testImplementation 'junit:junit:4.13.2'
+    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
+    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
 
     // Material Design
-    implementation 'com.google.android.material:material:1.3.0-alpha02'
+    implementation 'com.google.android.material:material:1.7.0-beta01'
 
     // Architectural Components
-    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:2.2.0"
+    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:2.5.1"
 
     // Lifecycle
     implementation "androidx.lifecycle:lifecycle-extensions:2.2.0"
-    implementation "androidx.lifecycle:lifecycle-livedata-ktx:2.2.0"
-    implementation "androidx.lifecycle:lifecycle-runtime:2.2.0"
-    implementation "androidx.lifecycle:lifecycle-runtime-ktx:2.2.0"
+    implementation "androidx.lifecycle:lifecycle-livedata-ktx:2.5.1"
+    implementation "androidx.lifecycle:lifecycle-runtime-ktx:2.5.1"
 
     // Coroutines
-    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.3.9'
-    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.3.9'
+    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.6.1'
+    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.6.1'
 
     // Coroutine Lifecycle Scopes
-    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:2.2.0"
-    implementation "androidx.lifecycle:lifecycle-runtime-ktx:2.2.0"
+    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:2.5.1"
+    implementation "androidx.lifecycle:lifecycle-runtime-ktx:2.5.1"
 
     // Navigation Component
-    implementation "androidx.navigation:navigation-fragment-ktx:2.3.0"
-    implementation "androidx.navigation:navigation-ui-ktx:2.3.0"
+    implementation "androidx.navigation:navigation-fragment-ktx:2.5.1"
+    implementation "androidx.navigation:navigation-ui-ktx:2.5.1"
 
     // Glide
-    implementation 'com.github.bumptech.glide:glide:4.11.0'
-    kapt 'com.github.bumptech.glide:compiler:4.11.0'
+    implementation 'com.github.bumptech.glide:glide:4.12.0'
+    kapt 'com.github.bumptech.glide:compiler:4.12.0'
 
     // Activity KTX for viewModels()
-    implementation "androidx.activity:activity-ktx:1.1.0"
+    implementation "androidx.activity:activity-ktx:1.5.1"
 
     //Dagger - Hilt
-    implementation "com.google.dagger:hilt-android:2.28-alpha"
-    kapt "com.google.dagger:hilt-android-compiler:2.28-alpha"
-    implementation "androidx.hilt:hilt-lifecycle-viewmodel:1.0.0-alpha02"
-    kapt "androidx.hilt:hilt-compiler:1.0.0-alpha02"
+    implementation "com.google.dagger:hilt-android:2.37"
+    kapt "com.google.dagger:hilt-android-compiler:2.37"
+    implementation "androidx.hilt:hilt-lifecycle-viewmodel:1.0.0-alpha03"
+    kapt "androidx.hilt:hilt-compiler:1.0.0"
 
     // Timber
     implementation 'com.jakewharton.timber:timber:4.7.1'
 
     // Firebase Firestore
-    implementation 'com.google.firebase:firebase-firestore:21.6.0'
+    implementation 'com.google.firebase:firebase-firestore:24.3.0'
 
     // Firebase Storage KTX
-    implementation 'com.google.firebase:firebase-storage-ktx:19.2.0'
+    implementation 'com.google.firebase:firebase-storage-ktx:20.0.2'
 
     // Firebase Coroutines
     implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-play-services:1.1.1'
 
     // ExoPlayer
-    api "com.google.android.exoplayer:exoplayer-core:2.11.8"
-    api "com.google.android.exoplayer:exoplayer-ui:2.11.8"
-    api "com.google.android.exoplayer:extension-mediasession:2.11.8"
+    api "com.google.android.exoplayer:exoplayer-core:2.18.1"
+    api "com.google.android.exoplayer:exoplayer-ui:2.18.1"
+    api "com.google.android.exoplayer:extension-mediasession:2.18.1"
 }
\ No newline at end of file
Index: app/src/main/java/com/plcoding/spotifycloneyt/exoplayer/MusicNotificationManager.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.plcoding.spotifycloneyt.exoplayer\r\n\r\nimport android.app.PendingIntent\r\nimport android.content.Context\r\nimport android.graphics.Bitmap\r\nimport android.graphics.drawable.Drawable\r\nimport android.support.v4.media.session.MediaControllerCompat\r\nimport android.support.v4.media.session.MediaSessionCompat\r\nimport com.bumptech.glide.Glide\r\nimport com.bumptech.glide.request.target.CustomTarget\r\nimport com.bumptech.glide.request.transition.Transition\r\nimport com.google.android.exoplayer2.Player\r\nimport com.google.android.exoplayer2.ui.PlayerNotificationManager\r\nimport com.plcoding.spotifycloneyt.R\r\nimport com.plcoding.spotifycloneyt.other.Constants.NOTIFICATION_CHANNEL_ID\r\nimport com.plcoding.spotifycloneyt.other.Constants.NOTIFICATION_ID\r\n\r\nclass MusicNotificationManager(\r\n    private val context: Context,\r\n    sessionToken: MediaSessionCompat.Token,\r\n    notificationListener: PlayerNotificationManager.NotificationListener,\r\n    private val newSongCallback: () -> Unit\r\n) {\r\n\r\n    private val notificationManager: PlayerNotificationManager\r\n\r\n    init {\r\n        val mediaController = MediaControllerCompat(context, sessionToken)\r\n        notificationManager = PlayerNotificationManager.createWithNotificationChannel(\r\n            context,\r\n            NOTIFICATION_CHANNEL_ID,\r\n            R.string.notification_channel_name,\r\n            R.string.notification_channel_description,\r\n            NOTIFICATION_ID,\r\n            DescriptionAdapter(mediaController),\r\n            notificationListener\r\n        ).apply {\r\n            setSmallIcon(R.drawable.ic_music)\r\n            setMediaSessionToken(sessionToken)\r\n        }\r\n    }\r\n\r\n    fun showNotification(player: Player) {\r\n        notificationManager.setPlayer(player)\r\n    }\r\n\r\n    private inner class DescriptionAdapter(\r\n        private val mediaController: MediaControllerCompat\r\n    ) : PlayerNotificationManager.MediaDescriptionAdapter {\r\n\r\n        override fun getCurrentContentTitle(player: Player): CharSequence {\r\n            return mediaController.metadata.description.title.toString()\r\n        }\r\n\r\n        override fun createCurrentContentIntent(player: Player): PendingIntent? {\r\n            return mediaController.sessionActivity\r\n        }\r\n\r\n        override fun getCurrentContentText(player: Player): CharSequence? {\r\n            return mediaController.metadata.description.subtitle.toString()\r\n        }\r\n\r\n        override fun getCurrentLargeIcon(\r\n            player: Player,\r\n            callback: PlayerNotificationManager.BitmapCallback\r\n        ): Bitmap? {\r\n            Glide.with(context).asBitmap()\r\n                .load(mediaController.metadata.description.iconUri)\r\n                .into(object : CustomTarget<Bitmap>() {\r\n                    override fun onResourceReady(\r\n                        resource: Bitmap,\r\n                        transition: Transition<in Bitmap>?\r\n                    ) {\r\n                        callback.onBitmap(resource)\r\n                    }\r\n\r\n                    override fun onLoadCleared(placeholder: Drawable?) = Unit\r\n                })\r\n            return null\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/plcoding/spotifycloneyt/exoplayer/MusicNotificationManager.kt b/app/src/main/java/com/plcoding/spotifycloneyt/exoplayer/MusicNotificationManager.kt
--- a/app/src/main/java/com/plcoding/spotifycloneyt/exoplayer/MusicNotificationManager.kt	(revision 5dc5900fd470722b3fa44bdcb4c3a0e32fb252bf)
+++ b/app/src/main/java/com/plcoding/spotifycloneyt/exoplayer/MusicNotificationManager.kt	(date 1662428428466)
@@ -26,18 +26,18 @@
 
     init {
         val mediaController = MediaControllerCompat(context, sessionToken)
-        notificationManager = PlayerNotificationManager.createWithNotificationChannel(
+        notificationManager = PlayerNotificationManager.Builder(
             context,
-            NOTIFICATION_CHANNEL_ID,
-            R.string.notification_channel_name,
-            R.string.notification_channel_description,
             NOTIFICATION_ID,
-            DescriptionAdapter(mediaController),
-            notificationListener
-        ).apply {
-            setSmallIcon(R.drawable.ic_music)
-            setMediaSessionToken(sessionToken)
-        }
+            NOTIFICATION_CHANNEL_ID)
+            .apply {
+                setChannelNameResourceId(R.string.notification_channel_name)
+                setChannelDescriptionResourceId(R.string.notification_channel_description)
+                setMediaDescriptionAdapter(DescriptionAdapter(mediaController))
+                setNotificationListener(notificationListener)
+                setSmallIconResourceId(R.drawable.ic_music)
+        }.build()
+
     }
 
     fun showNotification(player: Player) {
@@ -56,7 +56,7 @@
             return mediaController.sessionActivity
         }
 
-        override fun getCurrentContentText(player: Player): CharSequence? {
+        override fun getCurrentContentText(player: Player): CharSequence {
             return mediaController.metadata.description.subtitle.toString()
         }
 
Index: build.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>// Top-level build file where you can add configuration options common to all sub-projects/modules.\r\nbuildscript {\r\n    ext.kotlin_version = \"1.4.0\"\r\n    repositories {\r\n        google()\r\n        jcenter()\r\n    }\r\n    dependencies {\r\n        classpath \"com.android.tools.build:gradle:4.0.1\"\r\n        classpath \"org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version\"\r\n        classpath \"com.google.dagger:hilt-android-gradle-plugin:2.28.3-alpha\"\r\n        classpath 'com.google.gms:google-services:4.3.3'\r\n        // NOTE: Do not place your application dependencies here; they belong\r\n        // in the individual module build.gradle files\r\n    }\r\n}\r\n\r\nallprojects {\r\n    repositories {\r\n        google()\r\n        jcenter()\r\n    }\r\n}\r\n\r\ntask clean(type: Delete) {\r\n    delete rootProject.buildDir\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/build.gradle b/build.gradle
--- a/build.gradle	(revision 5dc5900fd470722b3fa44bdcb4c3a0e32fb252bf)
+++ b/build.gradle	(date 1662387271868)
@@ -1,15 +1,15 @@
 // Top-level build file where you can add configuration options common to all sub-projects/modules.
 buildscript {
-    ext.kotlin_version = "1.4.0"
+    ext.kotlin_version = "1.6.10"
     repositories {
         google()
-        jcenter()
+        mavenCentral()
     }
     dependencies {
-        classpath "com.android.tools.build:gradle:4.0.1"
+        classpath "com.android.tools.build:gradle:4.0.2"
         classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
         classpath "com.google.dagger:hilt-android-gradle-plugin:2.28.3-alpha"
-        classpath 'com.google.gms:google-services:4.3.3'
+        classpath 'com.google.gms:google-services:4.3.13'
         // NOTE: Do not place your application dependencies here; they belong
         // in the individual module build.gradle files
     }
@@ -18,7 +18,7 @@
 allprojects {
     repositories {
         google()
-        jcenter()
+        mavenCentral()
     }
 }
 
Index: app/src/main/java/com/plcoding/spotifycloneyt/exoplayer/callbacks/MusicPlayerEventListener.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.plcoding.spotifycloneyt.exoplayer.callbacks\r\n\r\nimport android.widget.Toast\r\nimport com.google.android.exoplayer2.ExoPlaybackException\r\nimport com.google.android.exoplayer2.Player\r\nimport com.plcoding.spotifycloneyt.exoplayer.MusicService\r\n\r\nclass MusicPlayerEventListener(\r\n    private val musicService: MusicService\r\n) : Player.EventListener {\r\n\r\n    override fun onPlayerStateChanged(playWhenReady: Boolean, playbackState: Int) {\r\n        super.onPlayerStateChanged(playWhenReady, playbackState)\r\n        if(playbackState == Player.STATE_READY && !playWhenReady) {\r\n            musicService.stopForeground(false)\r\n        }\r\n    }\r\n\r\n    override fun onPlayerError(error: ExoPlaybackException) {\r\n        super.onPlayerError(error)\r\n        Toast.makeText(musicService, \"An unknown error occured\", Toast.LENGTH_LONG).show()\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/plcoding/spotifycloneyt/exoplayer/callbacks/MusicPlayerEventListener.kt b/app/src/main/java/com/plcoding/spotifycloneyt/exoplayer/callbacks/MusicPlayerEventListener.kt
--- a/app/src/main/java/com/plcoding/spotifycloneyt/exoplayer/callbacks/MusicPlayerEventListener.kt	(revision 5dc5900fd470722b3fa44bdcb4c3a0e32fb252bf)
+++ b/app/src/main/java/com/plcoding/spotifycloneyt/exoplayer/callbacks/MusicPlayerEventListener.kt	(date 1662427723156)
@@ -2,22 +2,24 @@
 
 import android.widget.Toast
 import com.google.android.exoplayer2.ExoPlaybackException
+import com.google.android.exoplayer2.PlaybackException
 import com.google.android.exoplayer2.Player
 import com.plcoding.spotifycloneyt.exoplayer.MusicService
 
 class MusicPlayerEventListener(
     private val musicService: MusicService
-) : Player.EventListener {
+) : Player.Listener {
 
-    override fun onPlayerStateChanged(playWhenReady: Boolean, playbackState: Int) {
-        super.onPlayerStateChanged(playWhenReady, playbackState)
-        if(playbackState == Player.STATE_READY && !playWhenReady) {
+    override fun onPlaybackStateChanged(playbackState: Int) {
+        super.onPlaybackStateChanged(playbackState)
+        if(playbackState == Player.STATE_READY) {
             musicService.stopForeground(false)
         }
     }
 
-    override fun onPlayerError(error: ExoPlaybackException) {
+    override fun onPlayerError(error: PlaybackException) {
         super.onPlayerError(error)
-        Toast.makeText(musicService, "An unknown error occured", Toast.LENGTH_LONG).show()
+        Toast.makeText(musicService, "An unknown error occurred", Toast.LENGTH_LONG).show()
     }
+
 }
\ No newline at end of file
Index: .idea/gradle.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"GradleMigrationSettings\" migrationVersion=\"1\" />\r\n  <component name=\"GradleSettings\">\r\n    <option name=\"linkedExternalProjectsSettings\">\r\n      <GradleProjectSettings>\r\n        <option name=\"testRunner\" value=\"PLATFORM\" />\r\n        <option name=\"distributionType\" value=\"DEFAULT_WRAPPED\" />\r\n        <option name=\"externalProjectPath\" value=\"$PROJECT_DIR$\" />\r\n        <option name=\"gradleJvm\" value=\"1.8\" />\r\n        <option name=\"modules\">\r\n          <set>\r\n            <option value=\"$PROJECT_DIR$\" />\r\n            <option value=\"$PROJECT_DIR$/app\" />\r\n          </set>\r\n        </option>\r\n        <option name=\"resolveModulePerSourceSet\" value=\"false\" />\r\n      </GradleProjectSettings>\r\n    </option>\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/gradle.xml b/.idea/gradle.xml
--- a/.idea/gradle.xml	(revision 5dc5900fd470722b3fa44bdcb4c3a0e32fb252bf)
+++ b/.idea/gradle.xml	(date 1662387271895)
@@ -4,7 +4,7 @@
   <component name="GradleSettings">
     <option name="linkedExternalProjectsSettings">
       <GradleProjectSettings>
-        <option name="testRunner" value="PLATFORM" />
+        <option name="testRunner" value="GRADLE" />
         <option name="distributionType" value="DEFAULT_WRAPPED" />
         <option name="externalProjectPath" value="$PROJECT_DIR$" />
         <option name="gradleJvm" value="1.8" />
@@ -14,7 +14,6 @@
             <option value="$PROJECT_DIR$/app" />
           </set>
         </option>
-        <option name="resolveModulePerSourceSet" value="false" />
       </GradleProjectSettings>
     </option>
   </component>
Index: .idea/vcs.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/vcs.xml b/.idea/vcs.xml
new file mode 100644
--- /dev/null	(date 1662387271901)
+++ b/.idea/vcs.xml	(date 1662387271901)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="VcsDirectoryMappings">
+    <mapping directory="" vcs="Git" />
+  </component>
+</project>
\ No newline at end of file
Index: .idea/compiler.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/compiler.xml b/.idea/compiler.xml
new file mode 100644
--- /dev/null	(date 1662387271888)
+++ b/.idea/compiler.xml	(date 1662387271888)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="CompilerConfiguration">
+    <bytecodeTargetLevel target="1.8" />
+  </component>
+</project>
\ No newline at end of file
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"ProjectRootManager\" version=\"2\" languageLevel=\"JDK_1_8\" project-jdk-name=\"1.8\" project-jdk-type=\"JavaSDK\">\r\n    <output url=\"file://$PROJECT_DIR$/build/classes\" />\r\n  </component>\r\n  <component name=\"ProjectType\">\r\n    <option name=\"id\" value=\"Android\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
--- a/.idea/misc.xml	(revision 5dc5900fd470722b3fa44bdcb4c3a0e32fb252bf)
+++ b/.idea/misc.xml	(date 1662387271907)
@@ -1,6 +1,17 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
-  <component name="ProjectRootManager" version="2" languageLevel="JDK_1_8" project-jdk-name="1.8" project-jdk-type="JavaSDK">
+  <component name="DesignSurface">
+    <option name="filePathToZoomLevelMap">
+      <map>
+        <entry key="..\:/akam/AndroidProjects/SpotifyCloneYT/app/src/main/res/layout/activity_main.xml" value="0.358695652173913" />
+        <entry key="..\:/akam/AndroidProjects/SpotifyCloneYT/app/src/main/res/layout/fragment_home.xml" value="0.358695652173913" />
+        <entry key="..\:/akam/AndroidProjects/SpotifyCloneYT/app/src/main/res/layout/fragment_song.xml" value="0.3333333333333333" />
+        <entry key="..\:/akam/AndroidProjects/SpotifyCloneYT/app/src/main/res/layout/list_item.xml" value="0.358695652173913" />
+        <entry key="..\:/akam/AndroidProjects/SpotifyCloneYT/app/src/main/res/layout/swipe_item.xml" value="0.18110435663627153" />
+      </map>
+    </option>
+  </component>
+  <component name="ProjectRootManager" version="2" languageLevel="JDK_1_8" default="true" project-jdk-name="1.8" project-jdk-type="JavaSDK">
     <output url="file://$PROJECT_DIR$/build/classes" />
   </component>
   <component name="ProjectType">
Index: .idea/jarRepositories.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"RemoteRepositoriesConfiguration\">\r\n    <remote-repository>\r\n      <option name=\"id\" value=\"central\" />\r\n      <option name=\"name\" value=\"Maven Central repository\" />\r\n      <option name=\"url\" value=\"https://repo1.maven.org/maven2\" />\r\n    </remote-repository>\r\n    <remote-repository>\r\n      <option name=\"id\" value=\"jboss.community\" />\r\n      <option name=\"name\" value=\"JBoss Community repository\" />\r\n      <option name=\"url\" value=\"https://repository.jboss.org/nexus/content/repositories/public/\" />\r\n    </remote-repository>\r\n    <remote-repository>\r\n      <option name=\"id\" value=\"BintrayJCenter\" />\r\n      <option name=\"name\" value=\"BintrayJCenter\" />\r\n      <option name=\"url\" value=\"https://jcenter.bintray.com/\" />\r\n    </remote-repository>\r\n    <remote-repository>\r\n      <option name=\"id\" value=\"Google\" />\r\n      <option name=\"name\" value=\"Google\" />\r\n      <option name=\"url\" value=\"https://dl.google.com/dl/android/maven2/\" />\r\n    </remote-repository>\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/jarRepositories.xml b/.idea/jarRepositories.xml
--- a/.idea/jarRepositories.xml	(revision 5dc5900fd470722b3fa44bdcb4c3a0e32fb252bf)
+++ b/.idea/jarRepositories.xml	(date 1662387271914)
@@ -21,5 +21,10 @@
       <option name="name" value="Google" />
       <option name="url" value="https://dl.google.com/dl/android/maven2/" />
     </remote-repository>
+    <remote-repository>
+      <option name="id" value="MavenRepo" />
+      <option name="name" value="MavenRepo" />
+      <option name="url" value="https://repo.maven.apache.org/maven2/" />
+    </remote-repository>
   </component>
 </project>
\ No newline at end of file
Index: app/src/main/AndroidManifest.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    package=\"com.plcoding.spotifycloneyt\">\r\n\r\n    <uses-permission android:name=\"android.permission.INTERNET\" />\r\n    <uses-permission android:name=\"android.permission.FOREGROUND_SERVICE\" />\r\n\r\n    <application\r\n        android:name=\".SpotifyApplication\"\r\n        android:allowBackup=\"true\"\r\n        android:icon=\"@mipmap/ic_launcher\"\r\n        android:label=\"@string/app_name\"\r\n        android:roundIcon=\"@mipmap/ic_launcher_round\"\r\n        android:supportsRtl=\"true\"\r\n        android:theme=\"@style/AppTheme\">\r\n        <activity android:name=\".MainActivity\">\r\n            <intent-filter>\r\n                <action android:name=\"android.intent.action.MAIN\" />\r\n\r\n                <category android:name=\"android.intent.category.LAUNCHER\" />\r\n            </intent-filter>\r\n        </activity>\r\n    </application>\r\n\r\n</manifest>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/AndroidManifest.xml b/app/src/main/AndroidManifest.xml
--- a/app/src/main/AndroidManifest.xml	(revision 5dc5900fd470722b3fa44bdcb4c3a0e32fb252bf)
+++ b/app/src/main/AndroidManifest.xml	(date 1662387271876)
@@ -13,7 +13,14 @@
         android:roundIcon="@mipmap/ic_launcher_round"
         android:supportsRtl="true"
         android:theme="@style/AppTheme">
-        <activity android:name=".MainActivity">
+        <service android:name=".exoplayer.MusicService"
+            android:exported="true">
+            <intent-filter>
+                <action android:name="android.media.browse.MediaBrowserService" />
+            </intent-filter>
+        </service>
+        <activity android:name=".ui.MainActivity"
+            android:exported="true">
             <intent-filter>
                 <action android:name="android.intent.action.MAIN" />
 
